use examplesdb;
show tables;

# 각 테이블 구조를 볼 수 있는 명령 desc 테이블명;
desc dept;
desc SALGRADE;

# 조회 select 컬럼명(컬럼이 복수일 경우 , 로 구분) from 테이블명(테이블이 복수일 경우 , 로 구분)
select GRADE, LOSAL, HISAL
from SALGRADE;

select * from SALGRADE; -- 사용은 편하나 가독성이 떨어질 수 있다. 정확한 컬럼명을 명시하는것을 권장
select losal, grade, hisal from SALGRADE;

desc emp;
select distinct mgr from emp;   -- distinct는 중복된 값을 제외한다.
select distinct mgr, empno from emp;    -- distinct가 중복된 값을 제외했지만,
-- mgr와 empno가 혼합된 테이블이기 때문에 중복된값이라고 판단되지 않음

select distinct deptno, mgr from emp;

# 별명 붙이기, 별명은 띄어쓰기가 안된다.
select empno 사번, ename 사원이름 from emp;
select empno 사번, ename "사원 이름" from emp;

select concat('test', 'hello', empno) from emp;
select concat(ename, ' 사원의 매니저는 ', mgr, ' 입니다.') from emp;

select sal
from emp
order by sal;

# 내림 차순
select sal
from emp
order by sal desc ;

select ename, sal, mgr
from emp
order by sal, mgr, ename desc;

# 컬럼명 대신 번호로 정렬할 수 있다.
# 번호는 select에서 선언한 컬럼들 순서를 따른다.
select ename, sal, mgr
from emp
order by 2 desc, 3, 1 asc;

-- 조건에 따라 원하는 값만 조회 where
select *
from emp
where ename = 'king';

select *
from emp
where sal > 2000;

-- and, or
select *
from emp
where sal > 2000 or deptno = 20;

select *
from emp
where sal > 2000 and deptno = 20;

-- 조건에서 사용할 수 있는 연산자는 기존의 비교연산자 모두 가능하다.
select *
from emp
where deptno != 20;

desc emp;
select * from emp;

# null 대처
select * from emp where comm is null;
select * from emp where comm is not null;

-- 비교 연산자 IN, ANY, ALL
select * from emp where deptno = 10 or deptno = 20;
# 위와 같은 역할로 IN 을 사용할 수 있다.
select * from emp where deptno in(10, 20);

-- 통상 db내 값은 대소문자를 구분해놓은 사례가 많다. 다만 mysql은 구분하지 않는다.
select * from emp where job = 'manager';    -- 완전히 일치했을때만 검색

-- like 와잍드 카드를 이용해서 검색
-- _, % // _ 는 문자 하나, % 는 문자 0 ~ n개
select  * from emp where job like '_anager';

select ename from emp;
select * from emp where ename like '__rd';  -- emp 의 ename이 4글자이고 rd로 끝나는 값
select * from emp where ename like 's%';    -- emp 의 ename이 s로 시작하는 값
select * from emp where ename like '%t';    -- emp 의 ename이 t로 끝나는 값
select * from emp where ename like '%w%';    -- emp 의 ename에 w를 포함하는 값
-- 이름의 3번째 글자가 A인 사원을 조회
select * from emp where ename like '__A%';

-- 이름이 5글자인 정보를 조회
select * from emp where ename like '_____';

-- 입사일이 81년도인 정보
select * from emp where hiredate like '__81%';

select current_user;

-- 문자형 함수
select upper('SEoul');  # select upper('SEoul') from dual; <- 오라클의 경우
select upper(emp.ename) from emp;
select * from emp where upper(ename) = 'SMITH';
select substr('happy day', 3, 5);   # index가 1부터 시작

select * from emp where substr(hiredate, 3, 2) = '81';

select trim('          test           ');
select rtrim('         test           '), trim('              test           '), ltrim('            test              ');
select lpad('hi', 5, '*'), rpad('hi', 5, '#');
select lpad(ename, 10, '*') from emp;

-- 숫자형 함수
select abs(2), abs(-2);  # 절대값
select mod(34, 10), 34 % 4; # 나눈 나머지값
select floor(1.23), ceiling(1.23), round(1.8);  # 내림, 올림, 반올림
select round(1.245, 1), round(1.245 ,2);
select pow(2,2), sign(-32), sign(32), sign(0);
select greatest(5,4,12,656,2334,16), least(5,4,12,656,2334,16);

-- 숫자형 함수에 문자를 넣으면 안되는데 되버리는건 intellij 특징임으로 넣지 말자
select sign(ename) from emp;

-- 날짜형 함수
select current_date, curdate();
select current_time, current_timestamp;
select now(), sysdate(), current_timestamp;
select date_format(curdate(), '%w %M %y');  # 요일, 달, 년 으로 출력

-- 형변환 함수
select now();
select cast(now() as date);
select cast('123' as signed);
select cast(123 as char);
select cast(now() as char);

-- 함수 -- 단일행 함수, 그룹 함수
select upper(ename) from emp;   -- 단일행 함수 -> 각 요소를 보여줌
select sum(sal) from emp;   -- 그룹함수 -> 여러 요소에 대해 하나의 결과를 보여줌

# select ename, sum(sal) from emp;  -- 그룹함수와 함께 그루핑에 참여하지 않은 컬럼이 같이 나올 수 있다.

-- 부서별번호(그룹핑)별 급여총합을 구함
select deptno, sum(sal) from emp group by deptno;

select count(ename) from emp;   # ename은 null 이 없음으로 14
select count(comm) from emp;    # 해당 컬럼이 null값이 아닌 레코드만 개수한다.
select count(*) from emp;       # 전체 사원수를 셀 수 있다.

-- 부서별 사원수를 조회
select count(ename) from emp group by deptno;
select count(*) from emp group by deptno;

-- 부서별 최대 급여를 조회
select deptno, max(emp.sal) 최대 from emp group by deptno;
select deptno, avg(sal) 평균 from emp group by deptno;

-- 그룹별로 구한 값에 조건을 줄 수 있다.
-- 부서별 평균 급여, 단 평균 급여가 2000 이하인 부서는 제외
select deptno, avg(sal) from emp group by deptno having avg(sal) >= 2000;

-- 급여가 4500 이상 1000 이하의 사원을 제외하고,
-- 부서별 평균 급여, 단 평균 급여가 2000 이하인 부서는 제외
select deptno, avg(sal)
from emp
where sal <= 4500 and sal >= 1000
group by deptno
having avg(sal) >= 2000;

-- extract extract(필드 from소스)
select extract(YEAR from curdate());
select extract(YEAR from emp.hiredate) from emp;

select extract(MONTH from curdate());
select extract(MONTH from emp.hiredate) from emp;

select extract(DAY from hiredate) from emp;

select extract(HOUR from current_timestamp());
select extract(MINUTE from current_timestamp());
select extract(SECOND from current_timestamp());