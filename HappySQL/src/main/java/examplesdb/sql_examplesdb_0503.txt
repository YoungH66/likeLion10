use examplesdb;
show tables;

select emp.ename, emp.job, emp.sal from emp where deptno between 20 and 10; # 주의! 작은 값이 먼저 나와야 한다.
select ename, job, sal from emp where sal between 1800 and 3000;

desc emp;
desc dept;

select * from emp;
select * from dept;
select deptno, ename from emp;

-- 사원이름과 부서이름을 알고싶다.
select emp.ename, dept.dname
from emp, dept  # 여기까지만 하면, 카타르시안 조인으로 바람직 하지 않은 결과가 나온다.
where emp.deptno = dept.deptno; # equijoin, 컬럼에 있는 값이 정확하게 일치하는 경우에 사용할 수 있다.

select e.ename, d.dname from emp e, dept d
where e.deptno = d.deptno;

-- 사원이름, 부서명, 급여를 조회, 단, 급여가 2500 이상인 사원만 조회
select e.ename, d.dname, e.sal
from emp e, dept d
where e.deptno = d.deptno and e.sal >= 2500;

-- 사원이름, 부서명, 급여를 조회, 단, 급여가 2500 이상이고, 부서가 research 부서 사원만 조회
select e.ename, d.dname, e.sal
from emp e, dept d
where e.deptno = d.deptno
  and e.sal >= 2500
  and d.dname = 'research';

desc SALGRADE;
select * from SALGRADE;

-- 이름, 급여, 등급을 조회
select e.ename, e.sal, s.GRADE
    from emp e, SALGRADE s
where e.sal between s.LOSAL and s.HISAL;

select e.ename, d.dname
from emp e natural join dept d; # 두 테이블에 같은 이름의 컬럼들을 모두 조인조건으로 사용한다.

-- join using 컬럼명을 지정, 두개 테이블에 같은 이름의 컬럼이 있어야 한다.
select e.ename, d.dname
from emp e join dept d using (deptno);

-- join on 조건을 직접 기술, 컬럼명이 달라도 사용 가능
select e.ename, d.dname
from emp e join dept d on(e.deptno = d.deptno);

-- join on - 조건을 직접 기술. 부서번호 20
select e.ename, d.dname
from emp e join dept d on (e.deptno = d.deptno)
where d.deptno = 20 ;

INSERT INTO EMP VALUES (8000,'KIM','YOUNGHUN',7902,STR_TO_DATE('17-12-1980','%d-%m-%Y'),8000,NULL,NULL);

SELECT * from emp;

-- 값을 하나 넣었는데 조회되지 않는다.
select e.ename, d.dname
from emp e join dept d using (deptno);

-- 이때 outer join을 사용
select e.ename, d.dname
from emp e left outer join dept d using(deptno)    # left outer join
union   # mysql에선 full outer join을 문법적으로 제공하지 않는다. union으로 full outer를 대체
select e.ename, d.dname
from emp e right outer join dept d using(deptno);   # right outer join

-- 매니져 사원을 조회
select e.ename 사원명, m.ename 담당매니저
from emp e, emp m
where e.mgr = m.empno
order by m.empno;

-- 사원이름, 매니져이름을 조회. 단, 매니져가 없는 사원도 조회
select e.ename 사원명, m.ename 직속상사
from emp e left outer join emp m on (e.mgr = m.empno);

-- subquery
select * from emp;
# SMITH 직원이 속한 부서의 급여 평균
select avg(e.sal)
from emp e
where deptno = (select deptno from emp where ename = 'smith');

# scott의 급여보다 높은 급여를 받는 사람의 이름을 조회
select ename
from emp
where sal > (select sal
             from emp
             where ename = 'scott');

select ename, sal, deptno
from emp order by ename limit 1;

select min(emp.ename) from emp;

select ename, sal
from emp
where sal < (select avg(sal) from emp);

select e.ename, d.deptno
from emp e
    left join dept d on e.deptno = d.deptno
where d.dname = (select dname
                 from dept
                 where dname = 'SALES');

-- err 발생
# select *
# from emp
# where ename = (select min(ename)
#                 from emp
#                 group by deptno);

select *
from emp
where ename in (select min(ename)
                from emp
                group by deptno);


# in (= or) 결합
select *
from emp
where ename in ('KIM', 'CLARK', 'ADAMS', 'ALLEN');
# 위와 같다
select *
from emp
where ename = 'KIM' OR ename = 'CLARK' OR ename = 'ADAMS' OR ename = 'ALLEN';

# any all :: 등호 필요 / >any <any >=any ... / any ~~ or // all ~~ and
select *
from emp
where sal > any (select avg(sal)
                 from emp
                 group by deptno);

select avg(sal)
from emp
group by deptno;

select * from emp
where sal > 6000 or sal > 2916 or sal > 2175 or sal > 1566;

select * from emp
where sal > all (select avg(sal)
                 from emp
                 group by  deptno);

select * from emp
where sal > 6000 and sal > 2916 and sal > 2175 and sal > 1566;

# = any ( = or ) in과 같다.
select *
from emp
where sal < all (select avg(sal)
                 from emp
                 group by deptno);

# 서브 쿼리가 실행될 때 바깥쪽 row의 값을 이용해서 결과 값을 얻어내는 쿼리.
# 각 부서별 최고 급여를 받는 사원정보를 조회
select *
from emp e
    left join dept d on (e.deptno = d.deptno)
where e.sal in (select max(sal)
                from emp
                where e.deptno = deptno);

select *
from emp
where (deptno, sal) in (select deptno, max(sal)
                        from emp
                        group by deptno);

select e.deptno, e.empno, e.ename, e.sal
from emp e, (select s.deptno, max(s.sal) msal
             from emp s
             group by s.deptno) m
where e.deptno = m.deptno and e.sal = m.msal;

# 자기 부서의 평균 급여보다 많이 받는 사원의 정보를 조회
select *
from emp e
where sal > (select avg(sal)
             from emp
             where e.deptno = deptno);

-- test 용 테이블, 이후 삭제 요망
create table A (
    name int
);

create table b (
    name int
);

show tables;

insert into a (name) value ('1');
insert into a value ('3');

select * from a;

insert into b values ('4');
insert into b value ('2');

select * from b;

select * from A
union
select * from b;

select * from A
union all
select * from b;

# intersect 가 mysql에서 지원하지 않음 다음과 같이 사용
select a.name from a, b
where a.name = b.name;

# minus
select a.name from A
where a.name not in (select name from b);

drop table a;
drop table b;

show tables;
-- ----------------------------

# 순위를 매기는 함수
select sal, ename, rank() over (order by sal desc) ranking
from emp;